generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  groups        GroupMember[]
  expenses      Expense[]
  comments      Comment[]
  reactions     Reaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        GroupType
  members     GroupMember[]
  expenses    Expense[]
  channels    Channel[]
  settings    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum GroupType {
  HOUSEHOLD
  TRAVEL
  EVENT
}

model GroupMember {
  id        String    @id @default(cuid())
  userId    String
  groupId   String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  groupId   String
  type      ChannelType
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  GENERAL
  EXPENSES
  CHAT
}

model Expense {
  id          String    @id @default(cuid())
  title       String
  amount      Float
  currency    String
  date        DateTime
  category    String?
  description String?
  receipt     String?
  createdBy   String
  groupId     String
  splits      Split[]
  comments    Comment[]
  reactions   Reaction[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [createdBy], references: [id])
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Split {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  amount    Float
  paid      Boolean @default(false)
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  expenseId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  expenseId String
  userId    String
  createdAt DateTime @default(now())
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, expenseId])
}